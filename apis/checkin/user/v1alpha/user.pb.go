// Code generated by protoc-gen-go. DO NOT EDIT.
// source: checkin/user/v1alpha/user.proto

package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import checkin_protobuf "github.com/checkinhq/checkin/apis/checkin/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateUserRequest struct {
	Email     string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	FirstName string `protobuf:"bytes,3,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreateUserRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateUserRequest)(nil), "checkin.user.v1alpha.CreateUserRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*checkin_protobuf.Empty, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*checkin_protobuf.Empty, error) {
	out := new(checkin_protobuf.Empty)
	err := grpc.Invoke(ctx, "/checkin.user.v1alpha.User/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*checkin_protobuf.Empty, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkin.user.v1alpha.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "checkin.user.v1alpha.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checkin/user/v1alpha/user.proto",
}

func init() { proto.RegisterFile("checkin/user/v1alpha/user.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xce, 0x48, 0x4d,
	0xce, 0xce, 0xcc, 0xd3, 0x2f, 0x2d, 0x4e, 0x2d, 0xd2, 0x2f, 0x33, 0x4c, 0xcc, 0x29, 0xc8, 0x48,
	0x04, 0x73, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x44, 0xa0, 0x0a, 0xf4, 0xc0, 0x62, 0x50,
	0x05, 0x52, 0x32, 0x30, 0x6d, 0x60, 0x45, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95,
	0x10, 0x3d, 0x4a, 0x8d, 0x8c, 0x5c, 0x82, 0xce, 0x45, 0xa9, 0x89, 0x25, 0xa9, 0xa1, 0xc5, 0xa9,
	0x45, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22, 0x5c, 0xac, 0xa9, 0xb9, 0x89, 0x99,
	0x39, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x90, 0x14, 0x17, 0x47, 0x41, 0x62,
	0x71, 0x71, 0x79, 0x7e, 0x51, 0x8a, 0x04, 0x13, 0x58, 0x02, 0xce, 0x17, 0x92, 0xe5, 0xe2, 0x4a,
	0xcb, 0x2c, 0x2a, 0x2e, 0x89, 0xcf, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x06, 0xcb, 0x72, 0x82, 0x45,
	0xfc, 0x12, 0x73, 0x53, 0x85, 0xa4, 0xb9, 0x38, 0x73, 0x12, 0x61, 0xb2, 0x2c, 0x10, 0xbd, 0x20,
	0x01, 0x90, 0xa4, 0x51, 0x18, 0x17, 0x0b, 0xc8, 0x72, 0x21, 0x3f, 0x2e, 0x2e, 0x84, 0x53, 0x84,
	0xd4, 0xf5, 0xb0, 0x79, 0x47, 0x0f, 0xc3, 0xb1, 0x52, 0xe2, 0x70, 0x85, 0x30, 0x1f, 0xea, 0xb9,
	0x82, 0x7c, 0xe8, 0xc4, 0x16, 0xc5, 0x02, 0xd2, 0x9a, 0xc4, 0x06, 0x16, 0x37, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x27, 0x99, 0x3d, 0xf3, 0x41, 0x01, 0x00, 0x00,
}
