// Code generated by protoc-gen-gopherjs. DO NOT EDIT.
// source: checkin/user/v1alpha/auth.proto

/*
	Package user is a generated protocol buffer package.

	It is generated from these files:
		checkin/user/v1alpha/auth.proto
		checkin/user/v1alpha/user.proto

	It has these top-level messages:
		LoginRequest
		LoginResponse
		CreateUserRequest
*/
package user

import jspb "github.com/johanbrandhorst/protobuf/jspb"

import (
	context "context"

	grpcweb "github.com/johanbrandhorst/protobuf/grpcweb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the jspb package it is being compiled against.
const _ = jspb.JspbPackageIsVersion2

type LoginRequest struct {
	Email    string
	Password string
}

// GetEmail gets the Email of the LoginRequest.
func (m *LoginRequest) GetEmail() (x string) {
	if m == nil {
		return x
	}
	return m.Email
}

// GetPassword gets the Password of the LoginRequest.
func (m *LoginRequest) GetPassword() (x string) {
	if m == nil {
		return x
	}
	return m.Password
}

// MarshalToWriter marshals LoginRequest to the provided writer.
func (m *LoginRequest) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Email) > 0 {
		writer.WriteString(1, m.Email)
	}

	if len(m.Password) > 0 {
		writer.WriteString(2, m.Password)
	}

	return
}

// Marshal marshals LoginRequest to a slice of bytes.
func (m *LoginRequest) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a LoginRequest from the provided reader.
func (m *LoginRequest) UnmarshalFromReader(reader jspb.Reader) *LoginRequest {
	for reader.Next() {
		if m == nil {
			m = &LoginRequest{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Email = reader.ReadString()
		case 2:
			m.Password = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a LoginRequest from a slice of bytes.
func (m *LoginRequest) Unmarshal(rawBytes []byte) (*LoginRequest, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

type LoginResponse struct {
	Token string
}

// GetToken gets the Token of the LoginResponse.
func (m *LoginResponse) GetToken() (x string) {
	if m == nil {
		return x
	}
	return m.Token
}

// MarshalToWriter marshals LoginResponse to the provided writer.
func (m *LoginResponse) MarshalToWriter(writer jspb.Writer) {
	if m == nil {
		return
	}

	if len(m.Token) > 0 {
		writer.WriteString(1, m.Token)
	}

	return
}

// Marshal marshals LoginResponse to a slice of bytes.
func (m *LoginResponse) Marshal() []byte {
	writer := jspb.NewWriter()
	m.MarshalToWriter(writer)
	return writer.GetResult()
}

// UnmarshalFromReader unmarshals a LoginResponse from the provided reader.
func (m *LoginResponse) UnmarshalFromReader(reader jspb.Reader) *LoginResponse {
	for reader.Next() {
		if m == nil {
			m = &LoginResponse{}
		}

		switch reader.GetFieldNumber() {
		case 1:
			m.Token = reader.ReadString()
		default:
			reader.SkipField()
		}
	}

	return m
}

// Unmarshal unmarshals a LoginResponse from a slice of bytes.
func (m *LoginResponse) Unmarshal(rawBytes []byte) (*LoginResponse, error) {
	reader := jspb.NewReader(rawBytes)

	m = m.UnmarshalFromReader(reader)

	if err := reader.Err(); err != nil {
		return nil, err
	}

	return m, nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpcweb.Client

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpcweb package it is being compiled against.
const _ = grpcweb.GrpcWebPackageIsVersion2

// Client API for Authentication service

type AuthenticationClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpcweb.CallOption) (*LoginResponse, error)
}

type authenticationClient struct {
	client *grpcweb.Client
}

// NewAuthenticationClient creates a new gRPC-Web client.
func NewAuthenticationClient(hostname string, opts ...grpcweb.DialOption) AuthenticationClient {
	return &authenticationClient{
		client: grpcweb.NewClient(hostname, "checkin.user.v1alpha.Authentication", opts...),
	}
}

func (c *authenticationClient) Login(ctx context.Context, in *LoginRequest, opts ...grpcweb.CallOption) (*LoginResponse, error) {
	resp, err := c.client.RPCCall(ctx, "Login", in.Marshal(), opts...)
	if err != nil {
		return nil, err
	}

	return new(LoginResponse).Unmarshal(resp)
}
